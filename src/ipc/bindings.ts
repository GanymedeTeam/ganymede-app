// @ts-nocheck
/** biome-ignore */
// This file has been generated by Specta. DO NOT EDIT.

import { createTauRPCProxy as createProxy, type InferCommandOutput } from 'taurpc'
type TAURI_CHANNEL<T> = (response: T) => void


export type AlmanaxError = { DofusDbAlmanaxMalformed: JsonError } | { DofusDbItemMalformed: JsonError } | { RequestAlmanax: string } | { RequestAlmanaxContent: string } | { RequestItem: string } | { RequestItemContent: string } | { Conf: ConfError } | { Quest: QuestError }

export type AlmanaxReward = { name: string; quantity: number; kamas: number; experience: number; bonus: string; img: string | null }

export type AppVersionError = { GitHub: string } | { JsonMalformed: string } | { SemverParse: string }

export type AutoPilot = { name: string; position: string }

export type Conf = { autoTravelCopy: boolean; showDoneGuides: boolean; lang?: ConfLang; fontSize?: FontSize; profiles: Profile[]; profileInUse: string; autoPilots: AutoPilot[]; notes: Note[]; opacity: number }

export type ConfError = { Malformed: JsonError } | { CreateConfDir: string } | { ConfDir: string } | { SerializeConf: JsonError } | { UnhandledIo: string } | { SaveConf: string } | "GetProfileInUse" | { ResetConf: ConfError }

export type ConfLang = "En" | "Fr" | "Es" | "Pt"

export type ConfStep = { checkboxes: number[] }

export type Folder = { name: string }

export type FontSize = "ExtraSmall" | "Small" | "Normal" | "Large" | "ExtraLarge"

export type Guide = { id: number; name: string; status: Status; likes: number; dislikes: number; downloads: number | null; created_at: string; deleted_at: string | null; updated_at: string | null; lang: GuideLang; order: number; user: User; user_id: number; description: string | null; web_description: string | null; node_image: string | null }

export type GuideLang = "en" | "fr" | "es" | "pt"

export type GuideOrFolderToDelete = { type: "guide"; id: number; folder: string | null } | { type: "folder"; folder: string }

export type GuideStep = { name: string | null; map: string | null; pos_x: number; pos_y: number; web_text: string }

export type GuideWithSteps = { id: number; name: string; description: string | null; status: Status; likes: number; dislikes: number; downloads: number | null; deleted_at: string | null; updated_at: string | null; lang: GuideLang; order: number; user: User; web_description: string | null; node_image: string | null; steps: GuideStep[] }

export type Guides = { guides: GuideWithSteps[] }

export type GuidesError = { Pattern: string } | { ReadGuidesDirGlob: string } | { ReadGuideFile: string } | { GuideMalformed: JsonError } | { SerializeGuide: JsonError } | { CreateGuidesDir: string } | { WriteGuideFile: string } | { RequestGuide: string } | { RequestGuideContent: string } | { RequestGuides: string } | { RequestGuidesContent: string } | { GuideWithStepsMalformed: JsonError } | { GuidesMalformed: JsonError } | { ReadGuidesDir: string } | { GetGuideInSystem: number } | { DeleteGuideFileInSystem: string } | { DeleteGuideFolderInSystem: string } | { Opener: string }

export type GuidesOrFolder = ({ type: "guide" } & GuideWithSteps) | ({ type: "folder" } & Folder)

export type ImageError = { RequestImage: string } | { ConvertToBytes: string }

export type IsOld = { from: string; to: string; isOld: boolean }

export type JsonError = { Json: string } | { Serialize: string }

export type Note = { name: string; text: string }

export type Notification = { id: number; text: string; displayAt: string; createdAt: string; updatedAt: string }

export type NotificationsError = { Malformed: JsonError } | { SerializeViewedNotifications: JsonError } | { UnhandledIo: string } | { SaveViewedNotifications: string } | { FetchNotifications: string } | { ParseApiResponse: string }

export type OpenGuideStep = { step: number; progressionStep: number | null }

export type Profile = { id: string; name: string; level?: number; progresses: Progress[] }

export type Progress = { id: number; currentStep: number; steps: Partial<{ [key in number]: ConfStep }> }

export type QuestError = { RequestQuest: string } | { RequestQuestContent: string } | { DofusDbQuestMalformed: JsonError }

export type QuestSummary = { name: string; statuses: SummaryQuestStatus[] }

export type ReportError = { Server: string } | { Status: [number, string] }

export type ReportPayload = { username: string | null; content: string; step: number; guide_id: number }

export type Status = "draft" | "public" | "private" | "certified" | "gp"

export type Summary = { quests: QuestSummary[] }

export type SummaryQuestStatus = { setup: number } | { started: number } | { inProgress: number } | { completed: number }

export type UpdateAllAtOnceResult = null | string

export type UpdateError = { CheckUpdateError: string } | { GetUpdaterError: string }

export type User = { id: number; name: string; is_admin: number; is_certified: number }

export type ViewedNotifications = { viewed_ids: number[] }

const ARGS_MAP = { 'almanax':'{"get":["level","date"]}', 'api':'{"isAppVersionOld":[]}', 'base':'{"isProduction":[],"newId":[],"openUrl":["url"],"startup":[]}', 'conf':'{"get":[],"reset":[],"set":["conf"],"toggleGuideCheckbox":["guide_id","step_index","checkbox_index"]}', 'deep_link':'{"openGuideRequest":["guide_id","step"]}', 'guides':'{"copyCurrentGuideStep":[],"deleteGuidesFromSystem":["guides_or_folders_to_delete"],"downloadGuideFromServer":["guide_id","folder"],"getFlatGuides":["folder"],"getGuideFromServer":["guide_id"],"getGuideSummary":["guide_id"],"getGuides":["folder"],"getGuidesFromServer":["status"],"guideExists":["guide_id"],"hasGuidesNotUpdated":[],"openGuidesFolder":[],"updateAllAtOnce":[]}', 'image':'{"fetchImage":["url"]}', 'notifications':'{"getUnviewedNotifications":[],"getViewedNotifications":[],"markNotificationAsViewed":["notification_id"]}', 'report':'{"send_report":["payload"]}', 'security':'{"getWhiteList":[]}', 'update':'{"startUpdate":[]}' }
export type Router = { "almanax": {get: (level: number, date: string) => Promise<AlmanaxReward>},
"api": {isAppVersionOld: () => Promise<IsOld>},
"base": {isProduction: () => Promise<boolean>, 
newId: () => Promise<string>, 
openUrl: (url: string) => Promise<null>, 
startup: () => Promise<void>},
"conf": {get: () => Promise<Conf>, 
reset: () => Promise<null>, 
set: (conf: Conf) => Promise<null>, 
toggleGuideCheckbox: (guideId: number, stepIndex: number, checkboxIndex: number) => Promise<number>},
"deep_link": {openGuideRequest: (guideId: number, step: OpenGuideStep) => Promise<void>},
"guides": {copyCurrentGuideStep: () => Promise<void>, 
deleteGuidesFromSystem: (guidesOrFoldersToDelete: GuideOrFolderToDelete[]) => Promise<null>, 
downloadGuideFromServer: (guideId: number, folder: string) => Promise<Guides>, 
getFlatGuides: (folder: string) => Promise<GuideWithSteps[]>, 
getGuideFromServer: (guideId: number) => Promise<GuideWithSteps>, 
getGuideSummary: (guideId: number) => Promise<Summary>, 
getGuides: (folder: string | null) => Promise<GuidesOrFolder[]>, 
getGuidesFromServer: (status: Status | null) => Promise<Guide[]>, 
guideExists: (guideId: number) => Promise<boolean>, 
hasGuidesNotUpdated: () => Promise<boolean>, 
openGuidesFolder: () => Promise<null>, 
updateAllAtOnce: () => Promise<Partial<{ [key in number]: UpdateAllAtOnceResult }>>},
"image": {fetchImage: (url: string) => Promise<number[]>},
"notifications": {getUnviewedNotifications: () => Promise<Notification[]>, 
getViewedNotifications: () => Promise<ViewedNotifications>, 
markNotificationAsViewed: (notificationId: number) => Promise<null>},
"report": {send_report: (payload: ReportPayload) => Promise<null>},
"security": {getWhiteList: () => Promise<string[]>},
"update": {startUpdate: () => Promise<null>} };


export const createTauRPCProxy = () => createProxy<Router>(ARGS_MAP)
export type { InferCommandOutput }
